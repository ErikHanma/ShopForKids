import React, { useEffect, useState, useCallback } from 'react';
import { useParams, Link } from 'react-router-dom';
import { getProductById, getReviewsByProduct, getAverageRating, addToCart, toggleLikeReview, toggleDislikeReview, toggleHideReview, adminDeleteReview } from '../../services/api';
import { Product, ReviewDTO } from '../../types';
import { useAuth } from '../../contexts/AuthContext';
import RatingStars from './RatingStars';
import './ProductDetail.css';
import ReviewForm from './ReviewForm';
import { FaHeart } from 'react-icons/fa';

const ProductDetail: React.FC = () => {
    const { id } = useParams<{ id: string }>();
    const { user } = useAuth();
    const [product, setProduct] = useState<Product | null>(null);
    const [allReviews, setAllReviews] = useState<ReviewDTO[]>([]);
    const [displayedReviews, setDisplayedReviews] = useState<ReviewDTO[]>([]);
    const [averageRating, setAverageRating] = useState<number>(0);
    const [showModal, setShowModal] = useState(false);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [currentImageIndex, setCurrentImageIndex] = useState(0);
    const [expandedReplies, setExpandedReplies] = useState<Set<number>>(new Set());
    const [replyTo, setReplyTo] = useState<number | null>(null);
    const [deleteConfirm, setDeleteConfirm] = useState<number | null>(null);
    const reviewsPerPage = 3;

    const fetchProduct = useCallback(async () => {
        try {
            const response = await getProductById(Number(id));
            setProduct(response.data);
            setCurrentImageIndex(0);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞:', error);
        }
    }, [id]);

    const fetchAverageRating = useCallback(async () => {
        try {
            const response = await getAverageRating(Number(id));
            setAverageRating(response.data || 0);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏:', error);
            setAverageRating(0);
        }
    }, [id]);

    const fetchReviews = useCallback(async () => {
        try {
            const response = await getReviewsByProduct(Number(id), currentPage, reviewsPerPage);
            const newReviews = response.data.content;
            setTotalPages(response.data.totalPages);
            if (currentPage === 0) {
                setAllReviews(newReviews);
                setDisplayedReviews(user ? newReviews : newReviews.slice(0, 3));
            } else {
                setAllReviews(prev => [...prev, ...newReviews]);
                setDisplayedReviews(prev => user ? [...prev, ...newReviews] : newReviews.slice(0, 3));
            }
            await fetchAverageRating();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤:', error);
        }
    }, [id, currentPage, user, fetchAverageRating]);

    useEffect(() => {
        fetchProduct();
        fetchAverageRating();
    }, [fetchProduct, fetchAverageRating]);

    useEffect(() => {
        fetchReviews();
    }, [fetchReviews]);

    const handleLoadMore = () => {
        if (currentPage < totalPages - 1) {
            setCurrentPage(prev => prev + 1);
        }
    };

    const handleAddToCart = async () => {
        if (!user) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É');
            return;
        }
        if (!product) {
            alert('–¢–æ–≤–∞—Ä –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return;
        }
        try {
            await addToCart(product.id!, 1);
            setShowModal(true);
            setTimeout(() => setShowModal(false), 2000);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É');
        }
    };

    const handleReviewAdded = () => {
        setCurrentPage(0);
        setAllReviews([]);
        setDisplayedReviews([]);
        setExpandedReplies(new Set());
        fetchReviews();
    };

    const handleLike = async (reviewId: number) => {
        if (!user) {
            alert('–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫');
            return;
        }
        try {
            await toggleLikeReview(reviewId);
            fetchReviews();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∞–π–∫–∞:', error);
        }
    };

    const handleDislike = async (reviewId: number) => {
        if (!user) {
            alert('–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∑–ª–∞–π–∫');
            return;
        }
        try {
            await toggleDislikeReview(reviewId);
            fetchReviews();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∏–∑–ª–∞–π–∫–∞:', error);
        }
    };

    const handleHide = async (reviewId: number) => {
        if (!user || user.role !== 'ADMIN') {
            alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–∫—Ä—ã—Ç—å –æ—Ç–∑—ã–≤');
            return;
        }
        try {
            await toggleHideReview(reviewId);
            fetchReviews();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
        }
    };

    const handleAdminDelete = async (reviewId: number) => {
        if (!user || user.role !== 'ADMIN') {
            alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤');
            return;
        }
        setDeleteConfirm(reviewId);
    };

    const confirmDelete = async () => {
        if (deleteConfirm === null) return;
        try {
            await adminDeleteReview(deleteConfirm);
            setDeleteConfirm(null);
            fetchReviews();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
        }
    };

    const cancelDelete = () => {
        setDeleteConfirm(null);
    };

    const toggleReplies = (reviewId: number) => {
        const newExpanded = new Set(expandedReplies);
        if (newExpanded.has(reviewId)) {
            newExpanded.delete(reviewId);
        } else {
            newExpanded.add(reviewId);
        }
        setExpandedReplies(newExpanded);
    };

    const handleThumbnailClick = (index: number) => {
        setCurrentImageIndex(index);
    };

    const renderReview = (review: ReviewDTO, level: number = 0) => (
        <div key={review.id} className={`review-item ${level > 0 ? 'reply' : ''}`} style={{ marginLeft: `${level * 20}px` }}>
            {review.isHidden && user?.role !== 'ADMIN' ? (
                <p>[–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º]</p>
            ) : (
                <>
                    {review.user ? (
                        <p>
                            <Link to={`/user/${review.user.id}/reviews`}>
                                <img
                                    src={review.user.avatarUrl || '/default-avatar.png'}
                                    alt={review.user.fullName || 'User'}
                                    className="review-avatar"
                                />
                                <strong>{review.user.fullName || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</strong>
                            </Link>
                            {review.isAdminResponse && <span className="admin-badge"> (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)</span>}
                            <span> ‚òÖ </span> {review.rating}/5
                        </p>
                    ) : (
                        <p><strong>–ê–Ω–æ–Ω–∏–º</strong> <span>‚òÖ</span> {review.rating}/5</p>
                    )}
                    <p>{review.comment}</p>
                    <div className="review-actions">
                        <button onClick={() => handleLike(review.id)}>
                            üëç {review.likesCount} {review.likedByCurrentUser ? '(–í—ã)' : ''}
                        </button>
                        <button onClick={() => handleDislike(review.id)}>
                            üëé {review.dislikesCount} {review.dislikedByCurrentUser ? '(–í—ã)' : ''}
                        </button>
                        {user && (
                            <button onClick={() => setReplyTo(review.id)}>–û—Ç–≤–µ—Ç–∏—Ç—å</button>
                        )}
                        {user?.role === 'ADMIN' && (
                            <>
                                <button onClick={() => handleHide(review.id)}>
                                    {review.isHidden ? '–ü–æ–∫–∞–∑–∞—Ç—å' : '–°–∫—Ä—ã—Ç—å'}
                                </button>
                                <button onClick={() => handleAdminDelete(review.id)}>–£–¥–∞–ª–∏—Ç—å</button>
                            </>
                        )}
                        {review.replies.length > 0 && (
                            <button onClick={() => toggleReplies(review.id)}>
                                {expandedReplies.has(review.id) ? '–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã' : `–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã (${review.replies.length})`}
                            </button>
                        )}
                    </div>
                    {replyTo === review.id && (
                        <ReviewForm productId={product!.id!} parentReviewId={review.id} onReviewAdded={handleReviewAdded} />
                    )}
                    {expandedReplies.has(review.id) && review.replies.map(reply => renderReview(reply, level + 1))}
                </>
            )}
        </div>
    );

    if (!product) {
        return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    }

    const hasMoreReviews = user && currentPage < totalPages - 1;
    const currentImage = product.imageUrls.length > 0 ? product.imageUrls[currentImageIndex] : product.imageUrl;

    return (
        <div className="product-detail">
            <div className="left-column">
                <div className="image-section">
                    <div className="thumbnails">
                        {product.imageUrls.map((image, index) => (
                            <img
                                key={index}
                                src={image}
                                alt={`thumbnail-${index}`}
                                className={index === currentImageIndex ? 'active' : ''}
                                onClick={() => handleThumbnailClick(index)}
                            />
                        ))}
                    </div>
                    <div className="main-image">
                        <img src={currentImage} alt={product.name} />
                    </div>
                </div>
            </div>
            <div className="right-column">
                <h1 className="product-title">{product.name}</h1>
                <div className="rating-reviews">
                    <RatingStars rating={averageRating} />
                    <span>{averageRating.toFixed(1)} ({allReviews.length} –æ—Ç–∑—ã–≤–æ–≤) ‚Ä¢ 68 –≤–æ–ø—Ä–æ—Å–æ–≤</span>
                </div>
                <div className="original-badge">
                    <span>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä</span>
                </div>
                <div className="product-info">
                    <h3>–û —Ç–æ–≤–∞—Ä–µ</h3>
                    <p>{product.description}</p>
                </div>
                <div className="price-buy">
                    <div className="price">
                        <span className="current-price">{product.price} —Ä—É–±.</span>
                        <span className="old-price">{(product.price * 1.2).toFixed(0)} —Ä—É–±.</span>
                    </div>
                    <div className="buy-actions">
                        <button className="add-to-cart" onClick={handleAddToCart}>–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
                        <FaHeart className="favorite-icon" />
                        <button className="buy-now">–ö—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</button>
                    </div>
                    <div className="delivery-info">
                        <p>–î–æ—Å—Ç–∞–≤–∫–∞: –∑–∞–≤—Ç—Ä–∞</p>
                    </div>
                </div>
            </div>
            <div className="reviews-section">
                <h2>–û—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–µ</h2>
                {displayedReviews.length > 0 ? (
                    displayedReviews.map(review => renderReview(review))
                ) : (
                    <p>–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</p>
                )}
                {hasMoreReviews && (
                    <button className="load-more" onClick={handleLoadMore}>–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ</button>
                )}
            </div>
            {user && !replyTo && (
                <div className="add-review-section">
                    <h3>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</h3>
                    <ReviewForm productId={product.id!} onReviewAdded={handleReviewAdded} />
                </div>
            )}
            {showModal && (
                <div className="modal">–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É</div>
            )}
            {deleteConfirm !== null && (
                <div className="delete-confirm-modal">
                    <div className="modal-content">
                        <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?</p>
                        <button onClick={confirmDelete}>–î–∞</button>
                        <button onClick={cancelDelete}>–ù–µ—Ç</button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default ProductDetail;